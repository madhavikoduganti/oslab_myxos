//print "TIMER";
alias currentPID S0;
currentPID = (PTBR - 1024) / 8;
alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;
[ currentPCB + 1 ] = 1; // Set STATE to READY
[ currentPCB + 2 ] = BP;
[ currentPCB + 3 ] = SP - 1;	
alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ currentPCB + 4 ] = [ physicalSP ]; // Save IP of current process in the PCB from the stack
[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR;	
[ currentPCB + 7 ] = R0;	
[ currentPCB + 8 ] = R1;	
[ currentPCB + 9 ] = R2;	
[ currentPCB + 10 ] = R3;	
[ currentPCB + 11 ] = R4;
[ currentPCB + 12 ] = R5;	
[ currentPCB + 13 ] = R6;	
[ currentPCB + 14 ] = R7;


alias pid S2;
alias pcb S4;
pid = currentPID + 1;
while(1==1) do
	if(pid > 31) then
		pid = 0;
	endif;
	pcb = READY_LIST + 32 * pid;
	if([pcb + 1] == 1) then
		currentPID = pid;
		break;
	else
		pid = pid + 1;
	endif;	
endwhile;
alias PCB S5;
PCB = pcb;
[PCB + 1] = 2;
BP = [PCB + 2];
SP = [PCB + 3];
PTBR = [PCB + 5];
PTLR = [PCB + 6];
R0 = [PCB + 7];
R1 = [PCB + 8];
R2 = [PCB + 9];
R3 = [PCB + 10];
R4 = [PCB + 11];
R5 = [PCB + 12];
R6 = [PCB + 13];
R7 = [PCB + 14];




SP = SP + 1; 
alias newphysicalSP S2; 
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
[ newphysicalSP ] = [ PCB + 4 ]; // Stores IP field value of PCB on the stack 
//print "exiting timer";
breakpoint;
ireturn;
