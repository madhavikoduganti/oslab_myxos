// Load Exception Handlers to memory from disk
load (7, 1);
load (8, 2);

// Load Interrupt 1 Routine to memory from disk
load (11, 5);
load (12, 6);

// Load Interrupt 2 Routine to memory from disk
load (13, 7);
load (14, 8);

// Load Interrupt 3 Routine to memory from disk
load (15, 9);
load (16, 10);

// Load Interrupt 4 Routine to memory from disk
load (17, 11);
load (18, 12);

// Load Interrupt 5 Routine to memory from disk
load (19, 13);
load (20, 14);

// Load Interrupt 6 Routine to memory from disk
load (21, 15);
load (22, 16);

// Load Interrupt 7 Routine to memory from disk
load (23, 17);
load (24, 18);


//load timer interrupt to memory from disk 
load(9,3);
load(10,4);

//loading fat and disk free list to memory from disk
load(5,19);
load(6,20);




//---------setting up systemwide open file table entries..-----
//-------------no files are open at the startup----------
alias counter S0;			
counter = 0;
while ( counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;
//-----------file table set up-----------------------




//---------------------------initialising states of all processes to zero in pcb-------------------
counter = 0;
while(counter < 32) do
	[READY_LIST + counter*32 + 1] = 0;
	counter = counter + 1;
endwhile;
//--------------------done with initialising states of all processes to zero in pcb-------------------







//----------init process----------------------
[READY_LIST + 0] = 0;
load(25,21);	 // Load 1st page of code from disk to memory
load(26,22);	 // Load 2nd page of code from disk to memory
load(27,23);	 // Load 3rd page of code from disk to memory
PTBR = 1024;
PTLR = 4;
[PTBR + 0] = 25; // Physical Page Number for Logical Page 0
[PTBR + 1] = "01"; // Auxiliary Information for Logical Page 0
[PTBR + 2] = 26; // Physical Page Number for Logical Page 1
[PTBR + 3] = "01"; // Auxiliary Information for Logical Page 1
[PTBR + 4] = 27; // Physical Page Number for Logical Page 2
[PTBR + 5] = "01"; // Auxiliary Information for Logical Page 2
[PTBR + 6] = 28; // Physical Page Number for Logical Page 3 (Stack) 
[PTBR + 7] = "01"; // Auxiliary Information for Logical Page 3 (Stack)
[READY_LIST + 1] = 2; // Sets the entry for STATE as Running
[READY_LIST + 15] = -1;//setting of perprocess open file table of init process as invalid
[READY_LIST + 16] = -1;//at the start of load of init process.. 
[READY_LIST + 17] = -1;//system wide open file table index, LSEEK entries are set to -1
[READY_LIST + 18] = -1;
[READY_LIST + 19] = -1;
[READY_LIST + 20] = -1;
[READY_LIST + 21] = -1;
[READY_LIST + 22] = -1;
[READY_LIST + 23] = -1;
[READY_LIST + 24] = -1;
[READY_LIST + 25] = -1;
[READY_LIST + 26] = -1;
[READY_LIST + 27] = -1;
[READY_LIST + 28] = -1;
[READY_LIST + 29] = -1;
[READY_LIST + 30] = -1;
[READY_LIST + 31] = 0;
SP = 3 * 512;
[28 * 512] = 0; // Set up the IP value for INIT in the stack
//----------------- end init process---------------







//--------setting up memory list of RAM-----------------
counter = 0;
while(counter<64) do
	if(counter <= 28) then
		[MEM_LIST  + counter] = 1;
	else
		[MEM_LIST  + counter] = 0;
	endif;
	counter = counter + 1;
endwhile;
//--------done with setting up memory list-----------------

		











ireturn;
