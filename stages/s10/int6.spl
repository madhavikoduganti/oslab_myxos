alias callno S0;
alias return_add S1;
alias arg1 S2;
alias proc_blocks S10;

callno = [([PTBR + 2 * ((SP -1)/ 512)] * 512) + ((SP -1)% 512)];
							// Get system call no. from the stack and put it in a register
return_add = ([PTBR + 2 * ((SP -2)/ 512)] * 512) + ((SP -2)% 512); 
							//getting return address for  returning the value by the  system call
arg1 = [([PTBR + 2 * ((SP -3)/ 512)] * 512) + ((SP -3)% 512)];
							// Getting arguments from stack and put it in registers

//breakpoint;
//------------------------------------------------exec begins here------------------------------------------------
if(callno == 9) then
	alias i S3;
	alias j S4;
	alias k S5;
	alias basic_block S6;
	alias PTBR_process S12;
	alias l S7;
	alias m S8;
	i = 0;
	while((i<64) && ([FAT + i*8 + 0] != arg1)) do //checking if the file is present already
		i = i + 1;
	endwhile;
	if(i>=64) then
		[return_add] = -1;		//returning with -1 incase file is not there
		ireturn;
	else					//doin wt all needed if file is there
		basic_block = [FAT + i*8 + 2];	//i now has the index of file in fat
		load(1,basic_block);			//loading basic block to scratch pad
		proc_blocks = [FAT + i*8 + 1]/512;
		print"inexec";
//--------------new code------------------
		i=0;
		while(i<3) do
			if(([PTBR + i*2 + 1] == "01") || ([PTBR + i*2 + 1] == "11")) then
				[MEM_LIST + [PTBR + i*2 + 0]] = [MEM_LIST + [PTBR + i*2 + 0]] - 1;
			else
				if([PTBR + i*2 + 0] >= 448) then
					load(1, 20);
					[SCRATCHPAD + [PTBR + i*2 + 0]] = [SCRATCHPAD + [PTBR + i*2 + 0]] - 1;
					store(1, 20);
				endif;
			endif;				
			i = i + 1;
		endwhile;
		i=0;
		load(1,basic_block);			//loading basic block to scratch pad
		while(i<proc_blocks) do
			[PTBR + i*2 + 0] = [SCRATCHPAD + i];
			[PTBR + i*2 + 1] = "00";
			i = i + 1;
		endwhile;
		while(i<3) do
			[PTBR + i*2 + 0] = -1;
			[PTBR + i*2 + 1] = "00";
			i = i + 1;
		endwhile;
		[PTBR + 3*2 + 1] = "01";

//--------------new code------------------
//------------------closing all the files-----------------
		alias pid S6;
		alias file_process S7;
		pid = (PTBR-1024)/8;
		file_process = READY_LIST + pid*32 + 15;
		i = 0;
		while(i<8) do
			if([file_process + i*2] != -1) then
				[FILE_TABLE + [file_process + i*2]*2 +1]=[FILE_TABLE+ [file_process + i*2]*2 + 1] - 1;
				if([FILE_TABLE + [file_process + i*2]*2 + 1] == 0) then
					[FILE_TABLE + [file_process + i*2]*2 + 0] = -1;
				endif;
				[file_process + i*2] = -1;//invalidating SWOFT entry
				[file_process + i*2 + 1] = -1; //basically not needed
							//invalidating LSEEK
			endif;
			i = i + 1;
		endwhile;
		//--------------------all files closed-----------------------
		SP = 3*512; //setting SP to 3*512, ie the base of stack
		[([PTBR+2*((SP)/ 512)]*512)+((SP)%512)] = 0;//setting IP to 0.. IP shud be droppped into the top of stack
		[return_add] = 0;//this is not needed.. but just wrote it... for just incase..
//			endif;		
		print"inexec";
		breakpoint;
//	endif;
	endif;
	ireturn;
endif;
///------------------------------------------exec ends here---------------------------------------------
if(callno == 11) then
	[return_add] = (PTBR - 1024)/8;
endif;
if(callno == 12) then
	[return_add] = [READY_LIST + ((PTBR - 1024)/8)*32 + 31];
endif;
ireturn;
