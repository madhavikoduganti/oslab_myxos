alias pcb_index S0;
alias callno S1;
alias return_add S2;
alias i S3;
alias j S4;
alias k S5;
alias PCB_mom S6;
alias PCB_child S7;
alias PT_child S8;
alias SP_child S9;
alias PT_mom S10;
alias mom_block S11;
alias child_block S12;
alias child_stack S13;
//print [([PTBR + 2 * ((SP)/ 512)] * 512) + ((SP)% 512)];
//breakpoint;
callno = [([PTBR + 2 * ((SP-1)/ 512)] * 512) + ((SP-1)% 512)];
							// Get system call no. from the stack and put it in a register
return_add = ([PTBR + 2 * ((SP-2)/ 512)] * 512) + ((SP-2)% 512); 
							//getting return address for  returning the value by the  system call
//-------------sytem call for FORK---------------------
if(callno == 8)	then
	i=0;
	while((i<32) && ([READY_LIST + 1 + i*32] != 0) ) do					//getting free pcb
		i = i + 1;
	endwhile;
//	print "in fork";
//	print i;
	if(i>=32) then 		
//		print "failure1"	;						//if no pcb entry is freely available
		[return_add] = -1;						//returniing with failure
	else									//if there is free pcb entry for the child process
		pcb_index = i;							//pcb_index of child
		PCB_mom = READY_LIST + ((PTBR-1024)/8)*32; 		//pcb start address of mom
		PCB_child = READY_LIST + pcb_index*32;			//pcb start address of child
		[PCB_child + 0 ] = pcb_index;					//setting process id for child, end of step 3
		i=0; j =0;							//some random iterators
		
//------newchange begins-------------		
		while(i<64) do							//searching the available memory pages
			if([MEM_LIST + i] == 0) then
				break;						//means enough pages are available for child process
			endif;
			i = i + 1;
		endwhile;
		if(i >= 64) then
			[return_add] = -1;
		else
			child_stack = i;
			[MEM_LIST + child_stack] = 1;				//mem+i is now our child's stack
			load(1, [PTBR + 3*2 + 0]);				//loading mom's stack into scratch pad
			j=0;
			while(j<512) do
				[child_stack*512 + j] = [SCRATCHPAD + j];		//copying contents of momz stack to childz stack
				j = j + 1;
			endwhile;
			PT_child = PAGE_TABLE + pcb_index*8;
			[PT_child + 3*2 + 0] = child_stack;
			[PT_child + 3*2 + 1] = "01";
			i=0;
			while(i<3) do
				[PT_child + i*2 + 0] = [PTBR + i*2 + 0];
				[PT_child + i*2 + 1] = [PTBR + i*2 + 1];
				if(([PTBR + i*2 + 1] == "01") || ([PTBR + i*2 + 1] == "11")) then
					[MEM_LIST + [PTBR + i*2 + 0]] = [MEM_LIST + [PTBR + i*2 + 0]] + 1;
				else
					if([PTBR + i*2 + 0] >= 448) then
						load(1, 20);
						[SCRATCHPAD + [PTBR + i*2 + 0]] = [SCRATCHPAD + [PTBR + i*2 + 0]] + 1;
						store(1,20);
					endif;
				endif;				
				i = i + 1;
			endwhile;
//		endif;
		
//-------new change ends-------------------		
//				print("newover");
			i=0;
			PT_mom = PTBR; 	//start of point 5
			PT_child = PAGE_TABLE + pcb_index*8;
//			breakpoint;
			while(i<4) do
				if([PT_mom + i*2 + 0] != -1) then
					k = 0;
					while(k<64) do
						if([MEM_LIST + k] == 0) then
							[MEM_LIST + k] = 1;
							[PT_child + i*2 + 0] = k;
							[PT_child + i*2 + 1] = "01";
							j=0;
							mom_block = [PT_mom + i*2 + 0];					
							child_block = k;					
							while(j<512) do
								[child_block*512 + j] = [mom_block*512 + j];
								j = j + 1;
							endwhile;
							break;
						else
							k = k + 1;
						endif;						
					endwhile;
				else
					[PT_child + i*2 + 0] = -1;
					[PT_child + i*2 + 1] = "00";
				endif;
				i = i + 1;
			endwhile;
			[PCB_child + 6] = [PCB_mom + 6]; 
			[PCB_child + 5] = PT_child;
			[PCB_child + 4] = [([PTBR + 2 * ((SP)/ 512)] * 512) + ((SP)% 512)];
			[PCB_child + 3] = SP - 1;
			[PCB_child + 2] = BP;
			[PCB_child + 7] = R0;
			[PCB_child + 8] = R1;
			[PCB_child + 9] = R2;
			[PCB_child + 10] = R3;
			[PCB_child + 11] = R4;
			[PCB_child + 12] = R5;
			[PCB_child + 13] = R6;
			[PCB_child + 14] = R7; 
			i=15;
			while(i<31) do
				[PCB_child + i] = [PCB_mom + i];
				[PCB_child + i + 1] = [PCB_mom + i + 1];
				if([PCB_mom + i] != -1) then
					[FILE_TABLE + [PCB_mom + 1]*2  + 1] = [FILE_TABLE + [PCB_mom + 1]*2 + 1] + 1;
				endif;
				i = i + 2;
			endwhile;
			[PCB_child + 1] = 1;
			[PCB_child + 31] = (PTBR - 1024)/8; //storing parent pid to 31st bit of pcb of child
			[return_add] = pcb_index;
			[([PT_child + 2 * ((SP-2)/ 512)] * 512) + ((SP-2)% 512)] = -2; 
			breakpoint;
		endif;
	endif;
endif;
//breakpoint;
//----------done wid FORK-------------------------------
ireturn;
